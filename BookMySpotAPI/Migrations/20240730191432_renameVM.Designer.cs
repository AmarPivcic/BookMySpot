// <auto-generated />
using System;
using BookMySpotAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookMySpotAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240730191432_renameVM")]
    partial class renameVM
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookMySpotAPI.Autentifikacija.Models.AutentifikacijaToken", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("OsobaID")
                        .HasColumnType("int");

                    b.Property<string>("ipAdresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vrijednost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("vrijemeEvidentiranja")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("OsobaID");

                    b.ToTable("AutentifikacijaToken");
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.Grad", b =>
                {
                    b.Property<int>("GradID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradID"), 1L, 1);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradID");

                    b.ToTable("Gradovi");
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.Kategorija", b =>
                {
                    b.Property<int>("KategorijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategorijaID"), 1L, 1);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KategorijaID");

                    b.ToTable("Kategorija");
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.KorisnickiNalog", b =>
                {
                    b.Property<int>("OsobaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OsobaID"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("korisnickoIme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lozinka")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OsobaID");

                    b.ToTable("KorisnickiNalog");
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.KreditnaKartica", b =>
                {
                    b.Property<int>("KarticaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KarticaID"), 1L, 1);

                    b.Property<string>("BrojKartice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatumIsteka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("SigurnosniBroj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KarticaID");

                    b.ToTable("KreditneKartice");
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezervacijaID"), 1L, 1);

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RezervacijaDatumVrijeme")
                        .HasColumnType("datetime2");

                    b.Property<int>("UslugaID")
                        .HasColumnType("int");

                    b.HasKey("RezervacijaID");

                    b.ToTable("Rezervacija");
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.Usluga", b =>
                {
                    b.Property<int>("UslugaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UslugaID"), 1L, 1);

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trajanje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsluzniObjektID")
                        .HasColumnType("int");

                    b.HasKey("UslugaID");

                    b.ToTable("Usluga");
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.UsluzniObjekt", b =>
                {
                    b.Property<int>("UsluzniObjektID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsluzniObjektID"), 1L, 1);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KategorijaID")
                        .HasColumnType("int");

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("NazivObjekta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsluzniObjektID");

                    b.ToTable("UsluzniObjekt");
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.Administrator", b =>
                {
                    b.HasBaseType("BookMySpotAPI.Modul.Models.KorisnickiNalog");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.Korisnik", b =>
                {
                    b.HasBaseType("BookMySpotAPI.Modul.Models.KorisnickiNalog");

                    b.Property<int>("brojRezervacija")
                        .HasColumnType("int");

                    b.ToTable("Korisnik");
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.Manager", b =>
                {
                    b.HasBaseType("BookMySpotAPI.Modul.Models.KorisnickiNalog");

                    b.Property<string>("pozicija")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("BookMySpotAPI.Autentifikacija.Models.AutentifikacijaToken", b =>
                {
                    b.HasOne("BookMySpotAPI.Modul.Models.KorisnickiNalog", "KorisnickiNalog")
                        .WithMany()
                        .HasForeignKey("OsobaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KorisnickiNalog");
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.Administrator", b =>
                {
                    b.HasOne("BookMySpotAPI.Modul.Models.KorisnickiNalog", null)
                        .WithOne()
                        .HasForeignKey("BookMySpotAPI.Modul.Models.Administrator", "OsobaID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.Korisnik", b =>
                {
                    b.HasOne("BookMySpotAPI.Modul.Models.KorisnickiNalog", null)
                        .WithOne()
                        .HasForeignKey("BookMySpotAPI.Modul.Models.Korisnik", "OsobaID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookMySpotAPI.Modul.Models.Manager", b =>
                {
                    b.HasOne("BookMySpotAPI.Modul.Models.KorisnickiNalog", null)
                        .WithOne()
                        .HasForeignKey("BookMySpotAPI.Modul.Models.Manager", "OsobaID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
